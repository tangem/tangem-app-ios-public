default_platform(:ios)

BUILD_PATH = "./fastlane/builds/"
PRODUCTION_SCHEME = "Tangem"
BETA_SCHEME = "Tangem Beta"
ALPHA_SCHEME = "Tangem Alpha"
BSDK_EXAMPLE_SCHEME = "BlockchainSdkExample"
WORKSPACE_NAME = "TangemApp.xcworkspace"
FIREBASE_TESTERS_GROUP = "testers"

before_all do |lane, options|
  lanes_to_skip_bootstrap = [
    :update_translations,
    :deploy_firebase,
    :refresh_dsyms,
  ]

  if lanes_to_skip_bootstrap.include?(lane)
    next
  end

  # Xcode version overrides available only on CI
  if ENV["CI"]&.downcase == "true"
    if options[:xcode_version_override]&.empty?
      # Will use the Xcode version from the .xcode-version file
      xcodes(
        select_for_current_build_only: true
      )
    else
      xcodes(
        version: options[:xcode_version_override],
        select_for_current_build_only: true
      )
    end
  end

  Dir.chdir("..") do
    sh("./bootstrap.sh")
  end

  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
  ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "4"
end

desc """
A lane that builds and tests the scheme \"Tangem\" using a clean and build application.
Using enviroment: Production
Options:
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :test do
  run_tests(
    workspace: WORKSPACE_NAME,
    scheme: PRODUCTION_SCHEME,
    clean: true,
    code_coverage: true
  )
end

desc """
A lane that builds and tests SPM modules located in the \"Modules\" folder.
A separate lane is needed since it's still not possible to run unit tests from remove/local SPM dependencies inside the host app,
see https://forums.swift.org/t/running-swiftpm-tests-inside-project/62760 for details.
Options:
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :test_modules do |options|
  run_tests(
    package_path: "Modules",
    scheme: "TangemModules",
    # Without it fastlane won't pass the "-destination" argument to the "xcodebuild" and the build will fail.
    # A real & valid device name is not required, fastlane will use the first available device.
    device: "iPhone",
    # Still required in 2024 https://github.com/fastlane/fastlane/issues/20012#issuecomment-1263765513
    output_directory: Dir.pwd + "/test_output",
    result_bundle: true,
    xcodebuild_formatter: "xcpretty",
    clean: true
  )
end

desc """
A lane that builds a \"Tangem\" scheme and uploads the archive to TestFlight for release.
Using enviroment: Production
Options:
- version: app version
- build: optional build number
- changelog: string for description archive
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :release do |options|
  app_store_connect_api_key(duration: 1200, is_key_content_base64: true)
  increment_version_number(version_number: options[:version])
  increment_testflight_build_number(version: options[:version], build: options[:build])

  build(scheme: PRODUCTION_SCHEME, version: options[:version], filename: PRODUCTION_SCHEME, path: BUILD_PATH)
  upload_dsyms(app_id: ENV["APP_ID_PRODUCTION"], name: PRODUCTION_SCHEME)

  upload_testflight(
    name: PRODUCTION_SCHEME,
    version: options[:version],
    changelog: options[:changelog]
  )
  clean_artifacts
  slack_message(
    message: "Tangem Release successfully uploaded to TestFlight",
    changelog: options[:changelog]
  )
end

desc """
A lane that builds a \"BlockchainSdkExample\" scheme without running or publishing it, just to check that the scheme is buildable.
"""
lane :check_bsdk_example_buildable do |options|
  clear_derived_data  # Required otherwise raw xcodebuild doesn't work reliably
  xcodebuild(
    workspace: WORKSPACE_NAME,
    scheme: BSDK_EXAMPLE_SCHEME,
    xcargs: "-allowProvisioningUpdates",
    analyze: true
  )
end

desc """
This lane builds a \"Tangem Alpha\" scheme binary. Result binary can be used only for ad-hoc distribution.
Options:
- version: App version
- build: Build number
- filename: Name of the resulting artefact (IPA file)
- path: Path to binary
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :build_Alpha do |options|
  increment_version_number(version_number: options[:version])
  increment_firebase_build_number(app_id: ENV["APP_ID_ALPHA"], build: options[:build])

  build(
    export_method: "ad-hoc",
    scheme: ALPHA_SCHEME,
    version: options[:version],
    build: options[:build],
    filename: options[:filename],
    path: options[:path]
  )
end

desc """
A lane that builds a \"Tangem Beta\" scheme and uploads the archive to Firebase for testing.
Using enviroment: Production
Options:
- version: app version
- build: optional build number
- changelog: string for description archive
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :beta do |options|
  increment_version_number(version_number: options[:version])
  increment_firebase_build_number(app_id: ENV["APP_ID_BETA"], build: options[:build])
  build(scheme: BETA_SCHEME, export_method: "ad-hoc", filename: BETA_SCHEME, path: BUILD_PATH)

  upload_dsyms(app_id: ENV["APP_ID_BETA"], name: BETA_SCHEME)
  upload_firebase(
    name: BETA_SCHEME,
    app_id: ENV["APP_ID_BETA"],
    changelog: options[:changelog]
  )
  clean_artifacts
  slack_message(
    message: "Tangem Beta successfully uploaded to Firebase",
    changelog: options[:changelog]
  )
end

desc """
A lane that builds a \"Tangem Alpha\" scheme and uploads the archive to Firebase for testing.
Using enviroment: Test
Options:
- version: app version
- build: optional build number
- changelog: string for description archive
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :alpha do |options|
  UI.error("Use `Alpha - Build and Deploy` Github action instead")
end

desc """
Load from testFlight dSyms and upload it to Firebase
Options:
- version: app version
- build: build number
"""
lane :refresh_dsyms do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  app_store_connect_api_key(duration: 1200, is_key_content_base64: true)
  download_dsyms(
    app_identifier: app_identifier,
    version: options[:version],
    build_number: options[:build]
  )
  upload_symbols_to_crashlytics(app_id: ENV["PRODUCTION_SCHEME"])
  clean_build_artifacts
end

desc """
Fetches and updates localization bundles using Localise fastlane action (https://github.com/lokalise/lokalise-fastlane-actions).
Uses `LOKALISE_API_TOKEN` and `LOKALISE_PROJECT_ID` env vars.
Options:
- languages: A comma-delimited string of languages to update, like `en,fr,de,ja,ru,es,uk_UA`. Pass an empty string to update all available languages.
- destination: A file path to save localization files to.
"""
lane :update_translations do |options|
  # Can't pass an array as a param for a lane, see https://github.com/fastlane-community/fastlane-plugin-appicon/issues/41 for details
  languages = options[:languages]&.split(",")

  destination = options[:destination]
  UI.user_error!("Invalid destination path '#{destination}' for localization files") unless (destination and not destination.empty?)

  lokalise(
    destination: destination,
    replace_breaks: true,
    add_newline_eof: true,
    use_original: true,
    languages: languages,
    export_sort: "a_z",
    export_empty_as: "base"
  )
end

desc """
This lane deploy binary to Google Distribution
Options:
- app_id: Firebase App ID
- path: Path to binary
- firebase_token: Firebase CLI Token
- changelog: [optional] Changelog will be added to Google Distribution release notes along with the last commit hash.
"""
lane :deploy_firebase do |options|
  path = options[:path]
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"
  firebase_app_distribution(
    app: options[:app_id],
    ipa_path: path,
    groups: FIREBASE_TESTERS_GROUP,
    firebase_cli_token: options[:firebase_token],
    release_notes: release_notes
  )
end

private_lane :build do |options|
  clean_artifacts
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  build_app(
    xcargs: "-allowProvisioningUpdates",
    output_directory: options[:path],
    output_name: options[:filename],
    scheme: options[:scheme],
    clean: true,
    silent: false,
    export_method: options[:export_method],
    destination: "generic/platform=iOS",
    export_options: {
      distributionBundleIdentifier: app_identifier,
      iCloudContainerEnvironment: "Production"
    }
  )
end

private_lane :increment_firebase_build_number do |options|
  if options[:build].nil?
    latest_release = firebase_app_distribution_get_latest_release(
      app: options[:app_id],
      firebase_cli_token: ENV["FIREBASE_CREDITIONAL_KEY"]
    )

    if latest_release.nil?
      latest_build_number = 0
    else
      latest_build_number = latest_release[:buildVersion].to_i
    end
    increment_build_number({ build_number: latest_build_number + 1 })
  else
    increment_build_number(build_number: options[:build])
  end
end

private_lane :increment_testflight_build_number do |options|
  if options[:build].nil?
    latest_build_number = latest_testflight_build_number(version: options[:version])
    increment_build_number({ build_number: latest_build_number + 1 })
  else
    increment_build_number(build_number: options[:build])
  end
end

private_lane :upload_dsyms do |options|
  filename = options[:name] + ".app.dSYM.zip"
  path = BUILD_PATH + filename
  upload_symbols_to_crashlytics(
    app_id: options[:app_id],
    dsym_path: path
  )
end

private_lane :upload_firebase do |options|
  filename = options[:name] + ".ipa"
  path = BUILD_PATH + filename
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"

  firebase_app_distribution(
    app: options[:app_id],
    ipa_path: path,
    groups: FIREBASE_TESTERS_GROUP,
    firebase_cli_token: ENV["FIREBASE_CREDITIONAL_KEY"],
    release_notes: release_notes
  )
end

private_lane :upload_testflight do |options|
  filename = options[:name] + ".ipa"
  path = BUILD_PATH + filename
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"

  upload_to_testflight(
    skip_waiting_for_build_processing: true,
    ipa: path,
    app_version: options[:version],
    changelog: release_notes
  )
end

private_lane :slack_message do |options|
  slack(
    message: options[:message] + " @qa",
    default_payloads: [:git_branch, :last_git_commit],
    slack_url: ENV["SLACK_WEBHOOK_URL"],
    attachment_properties: {
      fields: [
        {
          title: "Git Hash",
          value: last_git_commit[:commit_hash],
        },
        {
          title: "Version",
          value: get_version_number(xcodeproj: "TangemApp.xcodeproj", target: "Tangem"),
        },
        {
          title: "Build number",
          value: get_build_number(xcodeproj: "TangemApp.xcodeproj"),
        },
        {
          title: "Changelog",
          value: options[:changelog],
        }
      ]
    },
    link_names: true
  )
end

private_lane :clean_artifacts do |options|
  sh("rm -rf builds")
  clean_build_artifacts
end
